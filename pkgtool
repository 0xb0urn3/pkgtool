#!/usr/bin/env python3

import os
import subprocess
import sys
import shutil
import logging
import json
import time
import psutil
import platform
import curses
import asyncio
import aiohttp
import sqlite3
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Tuple, Any, Union
from pathlib import Path
from rich.console import Console
from rich.table import Table
from rich.progress import Progress, SpinnerColumn, TextColumn, BarColumn
from rich.panel import Panel
from rich.layout import Layout
from rich.live import Live
from rich.syntax import Syntax
from rich.prompt import Prompt, Confirm
from rich.markdown import Markdown
from rich.tree import Tree
from rich.box import HEAVY
from rich.style import Style

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler(Path.home() / '.pkg_tool' / 'pkgtool.log'),
        logging.StreamHandler()
    ]
)

class PackageDatabase:
    """Local package database management."""
    
    def __init__(self, base_path: Path):
        """Initialize package database with given base path."""
        self.db_path = base_path / '.pkg_tool' / 'packages.db'
        self.db_path.parent.mkdir(parents=True, exist_ok=True)
        self.initialize_db()
    
    def initialize_db(self):
        """Initialize SQLite database for package tracking."""
        with sqlite3.connect(str(self.db_path)) as conn:
            conn.execute("""
                CREATE TABLE IF NOT EXISTS packages (
                    name TEXT PRIMARY KEY,
                    version TEXT,
                    install_date INTEGER,
                    size INTEGER,
                    dependencies TEXT,
                    description TEXT,
                    status TEXT
                )
            """)
    
    def add_package(self, package_info: Dict[str, Any]):
        """Add or update package information in database."""
        with sqlite3.connect(str(self.db_path)) as conn:
            conn.execute("""
                INSERT OR REPLACE INTO packages 
                VALUES (:name, :version, :install_date, :size, :dependencies, :description, :status)
            """, package_info)
    
    def get_package(self, name: str) -> Optional[Dict[str, Any]]:
        """Retrieve package information from database."""
        with sqlite3.connect(str(self.db_path)) as conn:
            cursor = conn.execute("SELECT * FROM packages WHERE name = ?", (name,))
            row = cursor.fetchone()
            
        if row:
            return {
                'name': row[0],
                'version': row[1],
                'install_date': row[2],
                'size': row[3],
                'dependencies': row[4],
                'description': row[5],
                'status': row[6]
            }
        return None

class SystemMonitor:
    """System resource monitoring and analysis."""
    
    def __init__(self, pkgtool=None):
        """Initialize SystemMonitor with optional PKGTool reference."""
        self.console = Console()
        self.pkgtool = pkgtool  # Store reference to parent PKGTool instance
        self.db_path = Path.home() / '.pkg_tool' / 'metrics.db'
        self.initialize_db()
    
    def initialize_db(self):
        """Initialize SQLite database for system monitoring."""
        self.db_path.parent.mkdir(parents=True, exist_ok=True)
        
        with sqlite3.connect(str(self.db_path)) as conn:
            conn.execute("""
                CREATE TABLE IF NOT EXISTS system_metrics (
                    timestamp INTEGER PRIMARY KEY,
                    cpu_percent REAL,
                    memory_percent REAL,
                    disk_usage REAL,
                    network_sent INTEGER,
                    network_recv INTEGER
                )
            """)
            
            conn.execute("""
                CREATE TABLE IF NOT EXISTS package_operations (
                    timestamp INTEGER PRIMARY KEY,
                    operation TEXT,
                    package TEXT,
                    status TEXT,
                    duration REAL
                )
            """)
    
    def collect_metrics(self) -> Dict[str, Any]:
        """Collect current system metrics."""
        metrics = {
            'timestamp': int(time.time()),
            'cpu_percent': psutil.cpu_percent(interval=1),
            'memory_percent': psutil.virtual_memory().percent,
            'disk_usage': psutil.disk_usage('/').percent,
            'network_sent': psutil.net_io_counters().bytes_sent,
            'network_recv': psutil.net_io_counters().bytes_recv
        }
        
        with sqlite3.connect(str(self.db_path)) as conn:
            conn.execute(
                """INSERT INTO system_metrics VALUES (:timestamp, :cpu_percent, 
                   :memory_percent, :disk_usage, :network_sent, :network_recv)""",
                metrics
            )
        
        return metrics
    
    def get_historical_metrics(self, hours: int = 24) -> Dict[str, List[Tuple[int, float]]]:
        """Retrieve historical metrics for specified time period."""
        cutoff = int(time.time() - hours * 3600)
        
        with sqlite3.connect(str(self.db_path)) as conn:
            cursor = conn.execute(
                "SELECT * FROM system_metrics WHERE timestamp > ? ORDER BY timestamp",
                (cutoff,)
            )
            rows = cursor.fetchall()
            
        metrics = {
            'cpu': [(row[0], row[1]) for row in rows],
            'memory': [(row[0], row[2]) for row in rows],
            'disk': [(row[0], row[3]) for row in rows],
            'network': [(row[0], row[4] + row[5]) for row in rows]
        }
        
        return metrics

class PKGTool:
    """Advanced package management tool with modern CLI interface and monitoring."""
    
    VERSION = "0.1.3-ALPHA"
    AUTHOR = "0xb0urn3"
    
    # Package manager configurations
    PACKAGE_MANAGERS = {
        "apt": {
            "path": "/usr/bin/apt",
            "commands": {
                "search": "apt search {pkg}",
                "install": "sudo apt install -y {pkg}",
                "remove": "sudo apt remove -y {pkg}",
                "update": "sudo apt update && sudo apt upgrade -y",
                "clean": "sudo apt autoremove -y && sudo apt clean",
                "info": "apt show {pkg}",
                "list": "apt list --installed",
                "hold": "sudo apt-mark hold {pkg}",
                "unhold": "sudo apt-mark unhold {pkg}",
                "depends": "apt-cache depends {pkg}",
                "size": "apt-cache show {pkg} | grep 'Size'",
                "verify": "debsums {pkg}",
                "orphans": "deborphan",
                "rollback": "sudo apt install {pkg}={version}",
                "changelog": "apt changelog {pkg}"
            }
        },
        # ... other package manager configurations remain the same ...
    }
    
    def __init__(self):
        """Initialize PKGTool with necessary components."""
        # Basic setup
        self.console = Console()
        self.package_db = PackageDatabase(Path.home())
        self.history_file = Path.home() / '.pkg_tool' / 'history.json'
        self.config_file = Path.home() / '.pkg_tool' / 'config.json'
        
        # Load configurations
        self.theme = self.load_theme()
        self.manager = self.detect_pkg_manager()
        
        # Initialize monitor with reference to self
        self.monitor = SystemMonitor(self)
        
        # Load history and config
        self.load_history()
        self.load_config()
    
    def detect_pkg_manager(self) -> Optional[str]:
        """Detect the system's package manager."""
        if os.path.exists("/etc/debian_version"):
            if os.path.exists(self.PACKAGE_MANAGERS["apt"]["path"]):
                return "apt"
        elif os.path.exists("/etc/arch-release"):
            if os.path.exists(self.PACKAGE_MANAGERS["pacman"]["path"]):
                return "pacman"
        elif os.path.exists("/etc/fedora-release"):
            if os.path.exists(self.PACKAGE_MANAGERS["dnf"]["path"]):
                return "dnf"
        elif platform.system() == "Darwin":
            if os.path.exists(self.PACKAGE_MANAGERS["brew"]["path"]):
                return "brew"
        return None
    
    def load_theme(self) -> Dict[str, Style]:
        """Load custom UI theme styles."""
        return {
            'header': Style(color="cyan", bold=True),
            'title': Style(color="blue", bold=True),
            'menu_item': Style(color="white"),
            'highlight': Style(color="yellow", bold=True),
            'error': Style(color="red", bold=True),
            'success': Style(color="green", bold=True)
        }
    
    def load_config(self) -> None:
        """Load configuration from file."""
        try:
            if self.config_file.exists():
                with open(self.config_file, 'r') as f:
                    config = json.load(f)
                    # Apply configuration settings
        except Exception as e:
            logging.error(f"Error loading config: {e}")
    
    def load_history(self) -> None:
        """Load operation history from file."""
        try:
            if self.history_file.exists():
                with open(self.history_file, 'r') as f:
                    self.history = json.load(f)
            else:
                self.history = []
        except Exception as e:
            logging.error(f"Error loading history: {e}")
            self.history = []
    
    def save_config(self) -> None:
        """Save current configuration to file."""
        try:
            self.config_file.parent.mkdir(parents=True, exist_ok=True)
            with open(self.config_file, 'w') as f:
                json.dump({}, f)  # Add configuration settings here
        except Exception as e:
            logging.error(f"Error saving config: {e}")
    
    async def handle_command(self, command: str) -> Tuple[bool, str]:
        """Execute command asynchronously with progress indication."""
        with Progress(
            SpinnerColumn(),
            TextColumn("[bold blue]Executing command..."),
            BarColumn(),
            TextColumn("[progress.percentage]{task.percentage:>3.0f}%"),
        ) as progress:
            task = progress.add_task("Executing", total=100)
            
            try:
                process = await asyncio.create_subprocess_shell(
                    command,
                    stdout=asyncio.subprocess.PIPE,
                    stderr=asyncio.subprocess.PIPE
                )
                
                progress.update(task, advance=50)
                stdout, stderr = await process.communicate()
                progress.update(task, advance=50)
                
                if process.returncode == 0:
                    return True, stdout.decode()
                return False, stderr.decode()
                
            except Exception as e:
                return False, str(e)
    
    def show_dashboard(self) -> None:
        """Display enhanced system dashboard with metrics."""
        layout = Layout()
        layout.split_column(
            Layout(name="header", size=3),
            Layout(name="body"),
            Layout(name="footer", size=3)
        )
        
        # Header
        header = Panel(
            f"[bold cyan]PKG Tool v{self.VERSION}[/] by [bold red]{self.AUTHOR}[/]\n"
            f"System: {platform.system()} {platform.release()}",
            style="cyan"
        )
        
        # Body with metrics
        metrics = self.monitor.collect_metrics()
        metrics_table = Table(show_header=True, header_style="bold magenta", box=HEAVY)
        metrics_table.add_column("Metric")
        metrics_table.add_column("Value")
        
        metrics_table.add_row("CPU Usage", f"{metrics['cpu_percent']}%")
        metrics_table.add_row("Memory Usage", f"{metrics['memory_percent']}%")
        metrics_table.add_row("Disk Usage", f"{metrics['disk_usage']}%")
        
        # Package statistics
        pkg_stats = self.get_package_stats()
        pkg_table = Table(show_header=True, header_style="bold blue", box=HEAVY)
        pkg_table.add_column("Package Stats")
        pkg_table.add_column("Count")
        
        for stat, count in pkg_stats.items():
            pkg_table.add_row(stat, str(count))
        
        # Combine tables
        body_layout = Layout()
        body_layout.split_row(
            Layout(Panel(metrics_table, title="System Metrics")),
            Layout(Panel(pkg_table, title="Package Statistics"))
        )
        
        # Footer
        footer = Panel(
            f"Last Update: {self.get_last_update_time()} | "
            f"Pending Updates: {self.get_pending_updates_count()}",
            style="cyan"
        )
        
        # Update layout
        layout["header"].update(header)
        layout["body"].update(body_layout)
        layout["footer"].update(footer)
        
        self.console.print(layout)
    
    def show_menu(self) -> None:
        """Display enhanced interactive menu."""
        menu_items = [
            ("1", "🔍", "Search Packages", "Search for packages in repositories"),
            ("2", "📦", "Install Packages", "Install new packages"),
            ("3", "🗑️", "Remove Packages", "Remove installed packages"),
            ("4", "🔄", "Update System", "Update system and packages"),
            ("5", "🧹", "Clean System", "Clean package cache and orphans"),
            ("6", "ℹ️", "Package Info", "Display package information"),
            ("7", "📋", "List Packages", "List installed packages"),
            ("8", "🔒", "Hold Package", "Prevent package updates"),
            ("9", "🔓", "Unhold Package", "Allow package updates"),
            ("10", "🔗", "Dependencies", "Show package dependencies"),
            ("11", "📊", "Package Size", "Show package disk usage"),
            ("12", "📜", "History", "View operation history"),
            ("13", "💾", "Backup", "Create system backup"),
            ("14", "📈", "Monitor", "System monitoring dashboard"),
            ("15", "⚙️", "Settings", "Configure tool settings"),
            ("16", "❌", "Exit", "Exit PKG Tool")
        ]
        
        menu_table = Table(
            show_header=True,
            header_style="bold magenta",
            box=HEAVY,
            title="PKG Tool Menu",
            title_style="bold cyan"
        )
        
        menu_table.add_column("Key", style="cyan", width=4)
        menu_table.add_column("", width=2)
        menu_table.add_column("Option", style="white")
        menu_table.add_column("Description", style="dim")
        
        for key, icon, option, description in menu_items:
            menu_table.add_row(key, icon, option, description)
        
        self.console.print(Panel(menu_table))
    
    def get_package_stats(self) -> Dict[str, int]:
        """
        Get comprehensive statistics about installed packages.
        
        This method collects various package-related statistics by querying both
        the system package manager and our local database. It provides insights
        into the system's package state including recently updated packages and
        those requiring updates.
        
        Returns:
            Dictionary containing package statistics with counts
        """
        stats = {
            "Total Packages": 0,
            "Recently Updated": 0,
            "Held Packages": 0,
            "Pending Updates": 0
        }
        
        try:
            # Query total installed packages using system package manager
            success, output = asyncio.run(self.handle_command(
                self.PACKAGE_MANAGERS[self.manager]["commands"]["list"]
            ))
            if success:
                stats["Total Packages"] = len(output.splitlines())
            
            # Check for held packages (version locks)
            if "hold" in self.PACKAGE_MANAGERS[self.manager]["commands"]:
                success, output = asyncio.run(self.handle_command(
                    f"dpkg --get-selections | grep hold" if self.manager == "apt"
                    else self.PACKAGE_MANAGERS[self.manager]["commands"]["list"] + " | grep 'hold'"
                ))
                if success:
                    stats["Held Packages"] = len(output.splitlines())
            
            # Calculate additional statistics from our local database
            with sqlite3.connect(str(self.package_db.db_path)) as conn:
                # Find packages updated in the last week
                week_ago = int(time.time()) - (7 * 24 * 60 * 60)
                cursor = conn.execute(
                    "SELECT COUNT(*) FROM packages WHERE install_date > ?",
                    (week_ago,)
                )
                stats["Recently Updated"] = cursor.fetchone()[0]
                
                # Count packages flagged as needing updates
                cursor = conn.execute(
                    "SELECT COUNT(*) FROM packages WHERE status = 'update-available'"
                )
                stats["Pending Updates"] = cursor.fetchone()[0]
                
        except Exception as e:
            logging.error(f"Error collecting package statistics: {e}")
        
        return stats

    def get_last_update_time(self) -> str:
        """
        Retrieve the timestamp of the last successful system update.
        
        This method queries the package operations history to find when the system
        was last updated. It provides this information in a human-readable format.
        
        Returns:
            Formatted string representing the last update time, or "Never" if no updates found
        """
        try:
            with sqlite3.connect(str(self.monitor.db_path)) as conn:
                cursor = conn.execute(
                    """SELECT timestamp FROM package_operations 
                    WHERE operation = 'update' AND status = 'success' 
                    ORDER BY timestamp DESC LIMIT 1"""
                )
                row = cursor.fetchone()
                if row:
                    return datetime.fromtimestamp(row[0]).strftime("%Y-%m-%d %H:%M")
        except Exception as e:
            logging.error(f"Error retrieving last update time: {e}")
        return "Never"

 def check_for_quit(self) -> bool:
    """
    Check if user has pressed 'q' to quit the current view.
    
    This method handles keyboard input checking in a cross-platform way,
    using different approaches for Windows and Unix-like systems.
    
    Returns:
        True if quit was requested, False otherwise
    """
    try:
        # Handle Windows systems
        if platform.system() == "Windows":
            try:
                import msvcrt
                if msvcrt.kbhit():
                    return msvcrt.getch().decode().lower() == 'q'
            except ImportError:
                return False
        # Handle Unix-like systems
        else:
            import termios
            import tty
            import sys
            
            fd = sys.stdin.fileno()
            old_settings = termios.tcgetattr(fd)
            try:
                tty.setraw(sys.stdin.fileno())
                ch = sys.stdin.read(1)
                return ch.lower() == 'q'
            finally:
                termios.tcsetattr(fd, termios.TCSADRAIN, old_settings)
                
    except Exception as e:
        logging.error(f"Error checking for quit input: {e}")
        return False
    
    return False

    def create_metrics_display(self, metrics: Dict[str, List[Tuple[int, float]]]) -> str:
        """
        Create a visual representation of system metrics using ASCII art.
        
        This method takes the collected metrics and generates a visual display
        showing trends over time. It uses simple ASCII characters to create
        charts that can be displayed in the terminal.
        
        Args:
            metrics: Dictionary containing historical metric data
            
        Returns:
            String containing the formatted visual display
        """
        display = []
        chart_width = 60
        chart_height = 10
        
        for metric_name, metric_data in metrics.items():
            if not metric_data:
                continue
                
            # Create chart header
            display.append(f"\n{metric_name.upper()} USAGE")
            display.append("=" * chart_width)
            
            # Calculate scaling factors
            max_value = max(value for _, value in metric_data)
            min_value = min(value for _, value in metric_data)
            value_range = max_value - min_value or 1
            
            # Generate chart points
            points = []
            for _, value in metric_data[-chart_width:]:
                point_height = int(((value - min_value) / value_range) * (chart_height - 1))
                points.append(point_height)
            
            # Draw chart
            for y in range(chart_height - 1, -1, -1):
                line = []
                for x in range(len(points)):
                    if points[x] == y:
                        line.append("●")
                    elif points[x] > y:
                        line.append("│")
                    else:
                        line.append(" ")
                display.append(f"{line[0]}{('').join(line[1:])}")
            
            # Add scale
            display.append("─" * chart_width)
            display.append(f"{min_value:.1f}{' ' * (chart_width-12)}{max_value:.1f}")
            
        return "\n".join(display)

    async def process_menu_choice(self, choice: str) -> bool:
        """
        Process user's menu selection and execute corresponding action.
        
        This method handles all menu interactions, executing the appropriate
        command based on user input. It manages both system commands and
        internal tool functions.
        
        Args:
            choice: String containing the user's menu selection
            
        Returns:
            Boolean indicating whether to continue program execution
        """
        try:
            # Handle exit condition
            if choice == "16":
                return False
            
            # Handle special menu items
            if choice == "14":  # System monitoring
                self.show_monitoring_dashboard()
            elif choice == "15":  # Settings
                self.show_settings()
            elif choice == "12":  # History
                self.show_history()
            elif choice == "13":  # Backup
                await self.create_backup()
            else:
                # Map menu choices to package manager commands
                command_map = {
                    "1": "search", "2": "install", "3": "remove",
                    "4": "update", "5": "clean", "6": "info",
                    "7": "list", "8": "hold", "9": "unhold",
                    "10": "depends", "11": "size"
                }
                
                if choice in command_map:
                    command_type = command_map[choice]
                    if command_type in ("install", "remove", "hold", "unhold"):
                        # Handle commands that require package names
                        packages = Prompt.ask("Enter package name(s)").split()
                        for pkg in packages:
                            command = self.PACKAGE_MANAGERS[self.manager]["commands"][command_type]
                            success, output = await self.handle_command(command.format(pkg=pkg))
                            self.console.print(output)
                    else:
                        # Handle other commands
                        command = self.PACKAGE_MANAGERS[self.manager]["commands"][command_type]
                        if "{pkg}" in command:
                            pkg = Prompt.ask("Enter package name")
                            command = command.format(pkg=pkg)
                        success, output = await self.handle_command(command)
                        self.console.print(output)
            
            return True
            
        except Exception as e:
            self.console.print(f"[red]Error processing command: {e}[/]")
            logging.error(f"Menu processing error: {e}")
            return True

    async def run(self) -> None:
        """
        Main program loop with asyncio support.
        
        This method serves as the main entry point for the application,
        managing the program flow and handling user interactions. It
        maintains the application state and ensures proper cleanup on exit.
        """
        if not self.manager:
            self.console.print("[red]Unsupported package manager or distribution.[/]")
            sys.exit(1)

        try:
            running = True
            while running:
                # Show main interface
                self.show_dashboard()
                self.show_menu()
                
                # Get user input
                choice = Prompt.ask(
                    "Enter your choice",
                    choices=[str(i) for i in range(1, 17)]
                )
                
                # Process user's choice
                running = await self.process_menu_choice(choice)
                
                # Pause for user to read output (except for monitoring dashboard)
                if running and choice != "14":
                    self.console.print("\nPress Enter to continue...")
                    input()
                
        except KeyboardInterrupt:
            self.console.print("\n[yellow]Program terminated by user.[/]")
        finally:
            # Perform cleanup and save state
            self.save_config()
            sys.exit(0)

if __name__ == "__main__":
    try:
        # Configure asyncio event loop
        if platform.system() == "Windows":
            asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())
        
        # Initialize and run PKGTool
        tool = PKGTool()
        asyncio.run(tool.run())
        
    except Exception as e:
        logging.error(f"Fatal error: {e}")
        sys.exit(1)
